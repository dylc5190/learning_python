13.1
==== filein.py
#!/usr/bin/env python3
import fileinput
with fileinput.input() as f_input:
 for line in f_input:
 print(line, end='')
====
$ ls | ./filein.py # Prints a directory listing to stdout.
$ ./filein.py /etc/passwd # Reads /etc/passwd to stdout.
$ ./filein.py < /etc/passwd # Reads /etc/passwd to stdout.

13.2
raise SystemExit('It failed!') -> exitcode 1 and stderr 'It failed!'
raise SystemExit(1) -> if stderr is not needed

13.3
argparse

13.4
Get username and password
 import getpass
 user = getpass.getuser() -> this does not really prompt for username. it just gives you the login name.
 passwd = getpass.getpass()
To get username, you can use 
 user = input('enter name: ')

13.5
os.get_terminal_size()

13.6
subprocess

13.7
shutil.copy
shutil.copytree
 raise exception once for all files that are failed to copy
shutil.move

13.8
shutil.unpack_archive('Python-3.3.0.tgz')
shutil.make_archive('py33','zip','Python-3.3.0')
shutil.get_archive_formats()

13.9
os.walk

13.10
Use configparser.ConfigParser() to read/write ini files.

13.11
logging
* Hardcoded config
  logging.basicConfig(
   filename='app.log',
   level=logging.ERROR
  )
* Config defined in ini
  logging.config.fileConfig('logconfig.ini')

defule output is stderr
 logging.basicConfig(level=logging.INFO)

change log level
 logging.getLogger().level = logging.DEBUG

13.12
Use logging in a module
 # somelib.py
 import logging
 log = logging.getLogger(__name__)        # get logger of calling module
 log.addHandler(logging.NullHandler())    # unless calling module calls logging.basicConfig(), there won't be any logs from somelib.
Change the logging level for 'somelib' only
 logging.getLogger('somelib').level=logging.DEBUG

13.13
Timer class.
Check other implementation or benchmark tools in the Internet.

13.14
Use resource.setrlimit() to limit the CPU or MEMORY usage.

13.15
import webbrowser
webbrowser.open('http://www.python.org')




